image: docker

build_test_images:
  stage: build
  tags:
    - 40c
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE --pull .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:experimental
    - docker push $CI_REGISTRY_IMAGE:experimental

search:
  image: docker:dind
  stage: test
  variables: {
    AUTHN_SECRET: "89#s3cr3t_15",
    DB_HOST: db_$CI_JOB_ID,
    DB_PORT: "5432",
    DB_USER: "postgres",
    DB_PW: "DXxCNtfnt!MOo!f8LY1!P%sw3KGzt@s!",
    DB_NAME: "discussion",
    DBAS_PROTOCOL: "http",
    DBAS_HOST: web_$CI_JOB_ID,
    DBAS_PORT: "4284"
  }
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY/cn-tsn/project/dbas/dbas/db:development
    - docker pull $CI_REGISTRY/cn-tsn/project/dbas/dbas:development
    - docker pull $CI_REGISTRY_IMAGE:experimental
    - docker network create -d bridge dbas_$CI_JOB_ID
    - docker run -d --name db_$CI_JOB_ID --net=dbas_$CI_JOB_ID $CI_REGISTRY/cn-tsn/project/dbas/dbas/db:development
    - sleep 8  # init dbas' database
    - docker run -d --name web_$CI_JOB_ID --net=dbas_$CI_JOB_ID -e AUTHN_SECRET=$AUTHN_SECRET -e DB_HOST=db_$CI_JOB_ID -e DB_PORT=$DB_PORT -e DB_USER=$DB_USER -e DB_PW=$DB_PW -e DB_NAME=$DB_NAME $CI_REGISTRY/cn-tsn/project/dbas/dbas:development
    - docker run -d --name search_$CI_JOB_ID --net=dbas_$CI_JOB_ID -e APPLICATION_HOST=$DBAS_HOST -e DATABASE_HOST=$DB_HOST -e APPLICATION_PROTOCOL=$DBAS_PROTOCOL -e DATABASE_PASSWORD=$DB_PW -e DATABASE_USER=$DB_USER -e APPLICATION_PORT=$DBAS_PORT -e DATABASE_NAME=$DB_NAME $CI_REGISTRY_IMAGE:experimental
    - sleep 25  # wait for elasticsearch to start up and pull data from dbas' database via dbas
  script:
    - docker exec search_$CI_JOB_ID nosetests --with-coverage --cover-package=core --cover-xml -w . core -v
  after_script:
    - docker kill db_$CI_JOB_ID web_$CI_JOB_ID search_$CI_JOB_ID || true
    - docker network rm dbas_$CI_JOB_ID || true
  coverage: '/^TOTAL\s*\d+\s*\d+\s*(\d+\%)\s*$/'
  artifacts:
    paths:
      - coverage.xml
    expire_in: 10 mins

flake8:
  image: python:3-alpine
  stage: test
  script:
    - pip3 install --quiet flake8
    - flake8 .
  allow_failure: true

sonar:
  image: hhucn/sonar-scanner
  stage: deploy
  script:
    - sonar-scanner -D sonar.host.url=https://sonarqube.cs.uni-duesseldorf.de -D sonar.login=$SONARQUBE_LOGIN -D sonar.projectKey=$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME -D sonar.projectName=$CI_PROJECT_NAME -D sonar.projectVersion=1 -D sonar.sources=. -D sonar.python.coverage.reportPath=coverage.xml
  only:
    - develop
  when: always

deploy_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
  only:
    - master

deploy_dev_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:development
    - docker push $CI_REGISTRY_IMAGE:development
  only:
    - develop
